#!/usr/bin/env bash


###############################################################################
# Configure bash prompt variable PS1.
#
# This script is used to configure the bash prompt variable PS1.
###############################################################################


###############################################################################
# Constants
###############################################################################

# Colours and formatting related
FORMATTING_BOLD_BLUE='\[\e[1;34m\]';
FORMATTING_BOLD_GREEN='\[\e[1;32m\]';
FORMATTING_RESET='\[\e[0m\]';

# Colours and formatting related (should be used in functions only)
FORMATTING_FUNC_GREEN='\001\e[0;32m\002';
FORMATTING_FUNC_RED='\001\e[0;31m\002';

# Escape sequences (for more details see:
# https://www.gnu.org/software/bash/manual/bashref.html#Controlling-the-Prompt)
HOSTNAME="\\H";
USERNAME="\\u";
WORKING_DIRECTORY="\\w";


###############################################################################
# Functions
###############################################################################

# Print git status.
# 
# Currently the git status comprises the git branch name if the current
# directory belongs to the work tree of a git repository, and is empty
# otherwise.
printGitStatus() {
    # Does the current directory belong to the work tree of a git repository?
    if [[ -z "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
        return;
    fi

    local gitBranchName;

    gitBranchName=$(git rev-parse --abbrev-ref HEAD);

    # Print git branch name
    if [[ -z "$(git status --short)" ]]; then
        printf " ${FORMATTING_FUNC_GREEN}(%s)" "${gitBranchName}";
    else
        printf " ${FORMATTING_FUNC_RED}(%s)" "${gitBranchName}";
    fi
}

# Set the PS1 bash prompt.
setPS1Prompt() {
    PS1="${FORMATTING_BOLD_GREEN}${USERNAME}@${HOSTNAME}${FORMATTING_RESET}";   # Username@Hostname
    PS1+=":";                                                                   # :
    PS1+="${FORMATTING_BOLD_BLUE}${WORKING_DIRECTORY}${FORMATTING_RESET}";      # Working directory
    PS1+="\$(printGitStatus)${FORMATTING_RESET}";                               # Git repository status
    PS1+="\\n";                                                                 # New line
    PS1+="$ ";                                                                  # $
}

# Set the tab/window title.
setWindowTitle() {
    echo -en "\\e]2;$(pwd)\\a";
}


###############################################################################
# Main
###############################################################################

# Set PS1 bash prompt
PROMPT_COMMAND="setPS1Prompt;setWindowTitle";
